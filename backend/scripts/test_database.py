#!/usr/bin/env python3
"""
Script para testar o banco de dados criado
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio backend ao path
backend_dir = Path(__file__).parent.parent
sys.path.insert(0, str(backend_dir))

from app.models.database import DatabaseConfig, get_db_connection, test_connection
import psycopg
from psycopg.rows import dict_row

def test_database():
    """Testa o banco de dados"""
    
    print("üß™ Testando banco de dados: sentinela_treino")
    print("=" * 50)
    
    # Configura√ß√£o do banco
    db_config = DatabaseConfig(
        host='localhost',
        port=5432,
        dbname='sentinela_treino',
        user='postgres',
        password='Jmkjmk.00'
    )
    
    # Teste 1: Conex√£o b√°sica
    print("1Ô∏è‚É£ Testando conex√£o...")
    test_result = test_connection(db_config)
    
    if test_result['success']:
        print(f"   ‚úÖ Conex√£o OK ({test_result['response_time']:.3f}s)")
        print(f"   üìä Vers√£o: {test_result['server_version'][:50]}...")
    else:
        print(f"   ‚ùå Falha na conex√£o: {test_result['error']}")
        return False
    
    # Teste 2: Verificar tabelas
    print("\n2Ô∏è‚É£ Verificando tabelas...")
    try:
        with get_db_connection(db_config) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public'
                    ORDER BY table_name
                """)
                tables = cur.fetchall()
                
                print(f"   üìã Tabelas encontradas: {len(tables)}")
                for table in tables:
                    print(f"      ‚úÖ {table['table_name']}")
                    
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar tabelas: {e}")
        return False
    
    # Teste 3: Verificar estrutura da tabela passagens
    print("\n3Ô∏è‚É£ Verificando estrutura da tabela passagens...")
    try:
        with get_db_connection(db_config) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute("""
                    SELECT column_name, data_type, is_nullable
                    FROM information_schema.columns
                    WHERE table_name = 'passagens'
                    ORDER BY ordinal_position
                """)
                columns = cur.fetchall()
                
                print(f"   üìã Colunas encontradas: {len(columns)}")
                for col in columns:
                    nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                    print(f"      üìù {col['column_name']:<25} {col['data_type']:<15} {nullable}")
                    
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar estrutura: {e}")
        return False
    
    # Teste 4: Verificar √≠ndices
    print("\n4Ô∏è‚É£ Verificando √≠ndices...")
    try:
        with get_db_connection(db_config) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute("""
                    SELECT indexname, tablename
                    FROM pg_indexes 
                    WHERE schemaname = 'public' AND tablename = 'passagens'
                    ORDER BY indexname
                """)
                indexes = cur.fetchall()
                
                print(f"   üìã √çndices encontrados: {len(indexes)}")
                for idx in indexes:
                    print(f"      üîç {idx['indexname']}")
                    
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar √≠ndices: {e}")
        return False
    
    # Teste 5: Verificar dados b√°sicos
    print("\n5Ô∏è‚É£ Verificando dados b√°sicos...")
    try:
        with get_db_connection(db_config) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                # Contar munic√≠pios
                cur.execute("SELECT COUNT(*) as count FROM municipios")
                municipios_count = cur.fetchone()['count']
                print(f"   üìç Munic√≠pios inseridos: {municipios_count}")
                
                # Mostrar alguns munic√≠pios
                cur.execute("SELECT nome, uf, eh_fronteira FROM municipios LIMIT 5")
                municipios = cur.fetchall()
                print("   üìç Exemplos:")
                for mun in municipios:
                    fronteira = "üåç" if mun['eh_fronteira'] else "üèôÔ∏è"
                    print(f"      {fronteira} {mun['nome']} ({mun['uf']})")
                    
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar dados: {e}")
        return False
    
    # Teste 6: Teste de inser√ß√£o
    print("\n6Ô∏è‚É£ Testando inser√ß√£o de dados...")
    try:
        with get_db_connection(db_config) as conn:
            with conn.cursor() as cur:
                # Inserir um ve√≠culo de teste
                cur.execute("""
                    INSERT INTO veiculos (placa, marca_modelo, cor, tipo)
                    VALUES (%s, %s, %s, %s)
                    ON CONFLICT (placa) DO NOTHING
                """, ('TEST1234', 'Toyota Corolla', 'Branco', 'Autom√≥vel'))
                
                # Inserir uma passagem de teste
                cur.execute("""
                    INSERT INTO passagens (
                        dataHoraUTC, placa, cidade, uf, codigoRodovia, 
                        velocidade, latitude, longitude, sistemaOrigem
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                """, (
                    '2024-01-15 10:30:00', 'TEST1234', 'S√£o Paulo', 'SP', 'BR-116',
                    85.5, -23.5505, -46.6333, 'Sistema Teste'
                ))
                
                conn.commit()
                print("   ‚úÖ Dados de teste inseridos com sucesso")
                
                # Limpar dados de teste
                cur.execute("DELETE FROM passagens WHERE placa = 'TEST1234'")
                cur.execute("DELETE FROM veiculos WHERE placa = 'TEST1234'")
                conn.commit()
                print("   üßπ Dados de teste removidos")
                
    except Exception as e:
        print(f"   ‚ùå Erro no teste de inser√ß√£o: {e}")
        return False
    
    print("\nüéâ Todos os testes passaram!")
    print("‚úÖ Banco 'sentinela_treino' est√° funcionando perfeitamente!")
    print("\nüìã Resumo:")
    print("   üóÑÔ∏è Banco: sentinela_treino")
    print("   üìä Tabelas: veiculos, passagens, municipios")
    print("   üîç √çndices: Otimizados para consultas r√°pidas")
    print("   üìç Dados: Munic√≠pios b√°sicos inseridos")
    print("   ‚úÖ Pronto para uso!")
    
    return True

if __name__ == "__main__":
    success = test_database()
    sys.exit(0 if success else 1)

