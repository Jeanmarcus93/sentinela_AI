#!/usr/bin/env python3
"""
Exemplo de uso do script de cria√ß√£o de banco
"""

import subprocess
import sys
from pathlib import Path

def exemplo_criar_banco():
    """Exemplo de como criar um banco usando o script"""
    
    # Configura√ß√µes do banco
    config = {
        'db_name': 'sentinela_exemplo',
        'host': 'localhost',
        'port': 5432,
        'user': 'postgres',
        'password': 'Jmkjmk.00'
    }
    
    print("üöÄ Exemplo de cria√ß√£o de banco PostgreSQL")
    print("=" * 50)
    print(f"üìä Banco: {config['db_name']}")
    print(f"üè† Host: {config['host']}:{config['port']}")
    print(f"üë§ Usu√°rio: {config['user']}")
    print()
    
    # Comando para executar
    cmd = [
        sys.executable,  # python
        'scripts/create_database.py',
        '--db-name', config['db_name'],
        '--host', config['host'],
        '--port', str(config['port']),
        '--user', config['user'],
        '--password', config['password']
    ]
    
    print("üìã Comando a ser executado:")
    print(" ".join(cmd))
    print()
    
    # Perguntar se deve executar
    resposta = input("Deseja executar este comando? (s/n): ").lower().strip()
    
    if resposta in ['s', 'sim', 'y', 'yes']:
        try:
            print("üîÑ Executando cria√ß√£o do banco...")
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Banco criado com sucesso!")
                print("\nüìã Sa√≠da:")
                print(result.stdout)
            else:
                print("‚ùå Erro ao criar banco:")
                print(result.stderr)
                
        except Exception as e:
            print(f"‚ùå Erro na execu√ß√£o: {e}")
    else:
        print("‚ùå Opera√ß√£o cancelada")

def mostrar_estrutura_passagens():
    """Mostra a estrutura da tabela passagens"""
    
    print("\nüìã Estrutura da Tabela Passagens")
    print("=" * 50)
    
    colunas = [
        ("id", "SERIAL PRIMARY KEY", "ID √∫nico"),
        ("dataHoraUTC", "TIMESTAMP", "Data e hora em UTC"),
        ("placa", "VARCHAR(10)", "Placa do ve√≠culo"),
        ("pontoCaptura", "VARCHAR(200)", "Ponto de captura"),
        ("cidade", "VARCHAR(200)", "Cidade"),
        ("uf", "VARCHAR(5)", "Unidade Federativa"),
        ("codigoEquipamento", "VARCHAR(100)", "C√≥digo do equipamento"),
        ("codigoRodovia", "VARCHAR(50)", "C√≥digo da rodovia"),
        ("km", "NUMERIC(10,3)", "Quilometragem"),
        ("faixa", "INTEGER", "Faixa da rodovia"),
        ("sentido", "VARCHAR(50)", "Sentido da via"),
        ("velocidade", "NUMERIC(5,2)", "Velocidade registrada"),
        ("latitude", "NUMERIC(10,8)", "Latitude GPS"),
        ("longitude", "NUMERIC(11,8)", "Longitude GPS"),
        ("refImagem1", "VARCHAR(500)", "Refer√™ncia da imagem 1"),
        ("refImagem2", "VARCHAR(500)", "Refer√™ncia da imagem 2"),
        ("sistemaOrigem", "VARCHAR(100)", "Sistema de origem"),
        ("ehEquipamentoMovel", "BOOLEAN", "Se √© equipamento m√≥vel"),
        ("ehLeituraHumana", "BOOLEAN", "Se √© leitura humana"),
        ("tipoInferidoIA", "VARCHAR(100)", "Tipo inferido por IA"),
        ("marcaModeloInferidoIA", "VARCHAR(200)", "Marca/modelo inferido por IA"),
        ("criado_em", "TIMESTAMP", "Data de cria√ß√£o"),
        ("atualizado_em", "TIMESTAMP", "Data de atualiza√ß√£o")
    ]
    
    for coluna, tipo, descricao in colunas:
        print(f"{coluna:<25} {tipo:<20} {descricao}")

def mostrar_comandos_uteis():
    """Mostra comandos √∫teis para trabalhar com o banco"""
    
    print("\nüîß Comandos √öteis")
    print("=" * 50)
    
    comandos = [
        ("Conectar ao banco", "psql -h localhost -p 5432 -U postgres -d sentinela_exemplo"),
        ("Ver tabelas", "\\dt"),
        ("Ver estrutura da tabela", "\\d passagens"),
        ("Ver √≠ndices", "\\di"),
        ("Contar registros", "SELECT COUNT(*) FROM passagens;"),
        ("Ver munic√≠pios inseridos", "SELECT * FROM municipios LIMIT 10;"),
        ("Sair do psql", "\\q")
    ]
    
    for descricao, comando in comandos:
        print(f"{descricao:<25} {comando}")

if __name__ == "__main__":
    print("üéØ Exemplo de Uso - Script de Cria√ß√£o de Banco")
    print("=" * 60)
    
    while True:
        print("\nüìã Op√ß√µes:")
        print("1. Mostrar estrutura da tabela passagens")
        print("2. Executar exemplo de cria√ß√£o de banco")
        print("3. Mostrar comandos √∫teis")
        print("4. Sair")
        
        opcao = input("\nEscolha uma op√ß√£o (1-4): ").strip()
        
        if opcao == "1":
            mostrar_estrutura_passagens()
        elif opcao == "2":
            exemplo_criar_banco()
        elif opcao == "3":
            mostrar_comandos_uteis()
        elif opcao == "4":
            print("üëã At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

