#!/usr/bin/env python3
"""
Debug de Scores de An√°lise de Rotas
===================================

Script para debugar os scores de suspei√ß√£o e entender por que todos
os casos est√£o sendo classificados como suspeitos.
"""

import psycopg
from pathlib import Path
from collections import defaultdict

# Configura√ß√£o do banco veiculos_db
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'dbname': 'veiculos_db',
    'user': 'postgres',
    'password': 'Jmkjmk.00'
}

def get_connection():
    """Cria conex√£o com banco"""
    try:
        return psycopg.connect(**DB_CONFIG)
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return None

def debug_route_scores():
    """Debug dos scores de an√°lise de rotas"""
    print("üîç DEBUG DE SCORES DE AN√ÅLISE DE ROTAS")
    print("=" * 50)
    
    conn = get_connection()
    if not conn:
        return
    
    try:
        with conn.cursor() as cur:
            # Buscar algumas ocorr√™ncias para debug
            cur.execute("""
                SELECT 
                    o.relato,
                    o.datahora,
                    o.datahora_fim,
                    o.ocupantes,
                    o.presos,
                    o.veiculos,
                    o.id as ocorrencia_id,
                    v.placa,
                    v.marca_modelo,
                    v.tipo,
                    v.ano_modelo,
                    v.cor,
                    v.local_emplacamento,
                    v.transferencia_recente,
                    v.comunicacao_venda,
                    v.crime_prf,
                    v.abordagem_prf
                FROM ocorrencias o
                LEFT JOIN veiculos v ON o.veiculo_id = v.id
                WHERE o.relato IS NOT NULL 
                AND o.relato != '' 
                AND LENGTH(o.relato) > 30
                ORDER BY RANDOM()
                LIMIT 10
            """)
            
            rows = cur.fetchall()
            print(f"üìä Analisando {len(rows)} ocorr√™ncias...")
            
            for i, row in enumerate(rows, 1):
                relato, datahora, datahora_fim, ocupantes, presos, veiculos, \
                ocorrencia_id, placa, marca_modelo, tipo, ano_modelo, cor, \
                local_emplacamento, transferencia_recente, comunicacao_venda, \
                crime_prf, abordagem_prf = row
                
                print(f"\nüîç OCORR√äNCIA {i}:")
                print(f"   ID: {ocorrencia_id}")
                print(f"   Placa: {placa}")
                print(f"   Local Emplacamento: {local_emplacamento}")
                print(f"   Data/Hora: {datahora}")
                print(f"   Crime PRF: {crime_prf}")
                print(f"   Abordagem PRF: {abordagem_prf}")
                print(f"   Transfer√™ncia Recente: {transferencia_recente}")
                print(f"   Relato: {relato[:100]}...")
                
                # Calcular score manualmente
                score = calculate_debug_score(row)
                print(f"   Score Total: {score:.3f}")
                
                if score > 0.6:
                    print(f"   Classifica√ß√£o: SUSPEITO ‚úÖ")
                else:
                    print(f"   Classifica√ß√£o: SEM_ALTERACAO ‚úÖ")
    
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    finally:
        conn.close()

def calculate_debug_score(row):
    """Calcula score de debug"""
    relato, datahora, datahora_fim, ocupantes, presos, veiculos, \
    ocorrencia_id, placa, marca_modelo, tipo, ano_modelo, cor, \
    local_emplacamento, transferencia_recente, comunicacao_venda, \
    crime_prf, abordagem_prf = row
    
    relato_lower = relato.lower()
    score = 0.0
    
    # 1. AN√ÅLISE DE LOCALIZA√á√ÉO
    location_score = 0.0
    if local_emplacamento:
        local_lower = local_emplacamento.lower()
        suspicious_routes = {
            'fronteira', 'fronteira brasil', 'fronteira argentina', 'fronteira paraguai',
            'fronteira uruguai', 'fronteira bol√≠via', 'fronteira col√¥mbia',
            'tri√¢ngulo das bermudas', 'regi√£o do pantanal', 'mato grosso do sul',
            'rio grande do sul', 'santa catarina', 'paran√°', 's√£o paulo',
            'rio de janeiro', 'minas gerais', 'goi√°s', 'mato grosso',
            'acre', 'rond√¥nia', 'amazonas', 'roraima', 'amap√°', 'par√°'
        }
        if any(area in local_lower for area in suspicious_routes):
            location_score += 0.3
            print(f"     + Localiza√ß√£o suspeita: {local_emplacamento} (+0.3)")
    
    # 2. AN√ÅLISE DE HOR√ÅRIO
    time_score = 0.0
    if datahora:
        hora_str = str(datahora)
        suspicious_hours = {
            '00:00', '01:00', '02:00', '03:00', '04:00', '05:00',
            '22:00', '23:00', '23:30', '00:30', '01:30', '02:30'
        }
        if any(hora in hora_str for hora in suspicious_hours):
            time_score += 0.2
            print(f"     + Hor√°rio suspeito: {datahora} (+0.2)")
    
    # 3. AN√ÅLISE DE PADR√ïES DE IDA E VOLTA
    round_trip_score = 0.0
    round_trip_patterns = {
        'ida e volta', 'ida e retorno', 'ida volta', 'ida retorno',
        'mesmo dia', 'mesmo trajeto', 'trajeto id√™ntico', 'rota id√™ntica',
        'frequ√™ncia alta', 'muitas viagens', 'viagens constantes'
    }
    if any(pattern in relato_lower for pattern in round_trip_patterns):
        round_trip_score += 0.3
        print(f"     + Padr√£o de ida e volta detectado (+0.3)")
    
    # 4. AN√ÅLISE DE INDICADORES DE VIAGEM IL√çCITA
    illicit_score = 0.0
    illicit_travel_indicators = {
        'sem destino claro', 'destino incerto', 'sem justificativa',
        'viagem sem motivo', 'sem explica√ß√£o', 'destino suspeito',
        'rota incomum', 'trajeto estranho', 'caminho suspeito',
        'frequ√™ncia suspeita', 'padr√£o estranho', 'comportamento repetitivo'
    }
    if any(indicator in relato_lower for indicator in illicit_travel_indicators):
        illicit_score += 0.2
        print(f"     + Indicador de viagem il√≠cita detectado (+0.2)")
    
    # 5. AN√ÅLISE DE √ÅREAS DE ALTO RISCO
    risk_area_score = 0.0
    high_risk_areas = {
        'fronteira seca', '√°rea de risco', 'zona de conflito',
        'regi√£o perigosa', '√°rea suspeita', 'local de risco',
        'ponto de tr√°fico', '√°rea de contrabando', 'zona de drogas'
    }
    if any(area in relato_lower for area in high_risk_areas):
        risk_area_score += 0.3
        print(f"     + √Årea de alto risco detectada (+0.3)")
    
    # 6. AN√ÅLISE DE INDICADORES ESPEC√çFICOS DO VE√çCULO
    vehicle_score = 0.0
    if crime_prf:
        vehicle_score += 0.4
        print(f"     + Hist√≥rico de crime PRF (+0.4)")
    if abordagem_prf:
        vehicle_score += 0.2
        print(f"     + Hist√≥rico de abordagem PRF (+0.2)")
    if transferencia_recente:
        vehicle_score += 0.1
        print(f"     + Transfer√™ncia recente (+0.1)")
    
    # Score final
    total_score = location_score + time_score + round_trip_score + illicit_score + risk_area_score + vehicle_score
    
    print(f"     Scores: Local={location_score:.1f}, Hora={time_score:.1f}, IdaVolta={round_trip_score:.1f}, Il√≠cita={illicit_score:.1f}, Risco={risk_area_score:.1f}, Ve√≠culo={vehicle_score:.1f}")
    
    return total_score

if __name__ == "__main__":
    debug_route_scores()

