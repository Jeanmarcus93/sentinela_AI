#!/usr/bin/env python3
# backend/scripts/patch_semantic_training.py
"""
Script para corrigir rapidamente o treinamento sem√¢ntico
Remove depend√™ncia da coluna classificacao_manual
"""

import os
from pathlib import Path

def patch_training_file():
    """Aplica corre√ß√£o no arquivo de treinamento"""
    
    project_root = Path(__file__).parent.parent
    training_file = project_root / "ml_models" / "training" / "train_semantic_agents.py"
    
    if not training_file.exists():
        print(f"‚ùå Arquivo n√£o encontrado: {training_file}")
        return False
    
    print(f"üîß Aplicando corre√ß√£o em: {training_file}")
    
    # Ler arquivo original
    with open(training_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Encontrar e substituir o m√©todo load_training_data
    old_method_start = 'def load_training_data(self) -> Tuple[List[str], List[str]]:'
    old_method_end = 'return textos, labels'
    
    # Novo m√©todo corrigido
    new_method = '''def load_training_data(self) -> Tuple[List[str], List[str]]:
        """
        Carrega dados de treinamento do banco de dados
        Vers√£o adaptada - trabalha sem classificacao_manual (ser√° implementada no futuro)
        """
        print("üîÑ Carregando dados de treinamento...")
        
        textos = []
        labels = []
        
        try:
            with get_db_connection() as conn:
                with conn.cursor() as cur:
                    # Query adaptada - sem classificacao_manual por enquanto
                    cur.execute("""
                        SELECT relato 
                        FROM ocorrencias 
                        WHERE relato IS NOT NULL 
                        AND LENGTH(TRIM(relato)) > 20
                        ORDER BY data_ocorrencia DESC
                        LIMIT 5000
                    """)
                    
                    rows = cur.fetchall()
                    
            print(f"üìä Encontrados {len(rows)} registros")
            
            # Processar dados com classifica√ß√£o autom√°tica inteligente
            print("ü§ñ Aplicando classifica√ß√£o autom√°tica baseada em regras...")
            print("   (No futuro, classificacao_manual ser√° usada para feedback)")
            
            for i, (relato,) in enumerate(rows):
                if not relato or len(relato.strip()) < 20:
                    continue
                    
                texto_limpo = relato.strip()
                textos.append(texto_limpo)
                
                # Classifica√ß√£o autom√°tica usando regras inteligentes
                label, confidence, metadata = self.classifier.classify_text_binary(texto_limpo)
                labels.append(label)
                    
                # Mostrar progresso a cada 500 registros
                if (i + 1) % 500 == 0:
                    current_suspicious = sum(1 for l in labels if l == "SUSPEITO")
                    current_normal = len(labels) - current_suspicious
                    print(f"   Processados {i + 1}/{len(rows)} | "
                          f"SUSPEITO: {current_suspicious} | "
                          f"SEM_ALTERACAO: {current_normal}")
                    
        except Exception as e:
            print(f"‚ùå Erro ao carregar dados: {e}")
            import traceback
            traceback.print_exc()
            return [], []
            
        # Estat√≠sticas finais
        from collections import Counter
        label_counts = Counter(labels)
        print(f"\\nüìà Distribui√ß√£o das classes (classifica√ß√£o autom√°tica):")
        for label, count in label_counts.items():
            percentage = (count / len(labels)) * 100
            print(f"   {label}: {count} ({percentage:.1f}%)")
        
        # Verificar qualidade dos dados
        total_samples = len(labels)
        if total_samples < 50:
            print("‚ö†Ô∏è Poucos dados para treinamento")
            return textos, labels
            
        # Verificar balanceamento
        min_class_size = min(label_counts.values()) if label_counts else 0
        
        if min_class_size < 10:
            print("‚ö†Ô∏è Classe minorit√°ria com poucos exemplos, adicionando casos sint√©ticos...")
            textos, labels = self._balance_with_synthetic_examples(textos, labels, label_counts)
            
            # Atualizar estat√≠sticas
            label_counts = Counter(labels)
            print(f"üìä Distribui√ß√£o ap√≥s balanceamento:")
            for label, count in label_counts.items():
                percentage = (count / len(labels)) * 100
                print(f"   {label}: {count} ({percentage:.1f}%)")
        
        print(f"‚úÖ Dataset preparado: {len(labels)} amostras totais")
        return textos, labels
    
    def _balance_with_synthetic_examples(self, textos: List[str], labels: List[str], 
                                       current_counts: Counter) -> Tuple[List[str], List[str]]:
        """
        Adiciona exemplos sint√©ticos para balancear classes
        Ser√£o substitu√≠dos por feedback real no futuro
        """
        print("   üîß Balanceando dataset com exemplos sint√©ticos...")
        
        # Determinar classe minorit√°ria
        minority_class = min(current_counts, key=current_counts.get)
        minority_count = current_counts[minority_class]
        majority_count = max(current_counts.values())
        
        # Calcular quantos exemplos adicionar (m√°ximo 30% do dataset)
        target_minority = min(majority_count // 2, minority_count + 50)
        examples_needed = max(0, target_minority - minority_count)
        
        print(f"   üìä Classe minorit√°ria: {minority_class} ({minority_count} exemplos)")
        print(f"   üìä Adicionando {examples_needed} exemplos sint√©ticos")
        
        if minority_class == "SUSPEITO":
            synthetic_examples = [
                "O indiv√≠duo foi encontrado com subst√¢ncia entorpecente durante abordagem policial na regi√£o central",
                "Confessou estar envolvido com tr√°fico de drogas h√° alguns meses na comunidade local",
                "Foi preso em flagrante portando arma de fogo sem documenta√ß√£o legal",
                "Portava material entorpecente dividido em pequenas por√ß√µes caracter√≠sticas de venda",
                "Assumiu a participa√ß√£o em crimes contra o patrim√¥nio na regi√£o",
                "Foi encontrado com grande quantidade de dinheiro sem comprova√ß√£o de origem l√≠cita",
                "Portava arma branca e demonstrou atitude agressiva durante abordagem",
                "Confessou participa√ß√£o em esquema criminoso envolvendo outros indiv√≠duos",
                "Estava em posse de objetos com ind√≠cios de origem criminosa",
                "Demonstrou conhecimento detalhado sobre atividades il√≠citas locais"
            ]
        else:
            synthetic_examples = [
                "Estava retornando do trabalho quando foi abordado pela equipe policial",
                "Colaborou plenamente com a investiga√ß√£o e forneceu todas as informa√ß√µes solicitadas",
                "Apresentou documenta√ß√£o completa e comprovou sua identifica√ß√£o",
                "Reside na regi√£o h√° v√°rios anos e possui refer√™ncias na comunidade",
                "Trabalha regularmente e n√£o possui antecedentes criminais",
                "Demonstrou transpar√™ncia total durante todo o procedimento policial",
                "Estava acompanhado de familiares no momento da abordagem",
                "Forneceu informa√ß√µes precisas sobre sua rotina e atividades",
                "Demonstrou coopera√ß√£o e respeito durante toda a ocorr√™ncia",
                "Possui emprego formal e comprovou sua situa√ß√£o profissional"
            ]
        
        # Adicionar exemplos necess√°rios
        examples_to_add = []
        labels_to_add = []
        
        for i in range(examples_needed):
            example = synthetic_examples[i % len(synthetic_examples)]
            if i >= len(synthetic_examples):
                example = f"{example} durante procedimento de rotina"
            
            examples_to_add.append(example)
            labels_to_add.append(minority_class)
        
        # Adicionar ao dataset
        textos.extend(examples_to_add)
        labels.extend(labels_to_add)
        
        print(f"   ‚úÖ {len(examples_to_add)} exemplos sint√©ticos adicionados")
        print("   üí° No futuro, estes ser√£o substitu√≠dos por feedback manual dos usu√°rios")
        
        return textos, labels'''
    
    # Encontrar posi√ß√£o do m√©todo antigo
    start_pos = content.find(old_method_start)
    if start_pos == -1:
        print("‚ùå M√©todo load_training_data n√£o encontrado")
        return False
    
    # Encontrar o final do m√©todo (pr√≥ximo def ou fim da classe)
    lines = content[start_pos:].split('\n')
    method_lines = []
    indent_level = None
    
    for i, line in enumerate(lines):
        if i == 0:  # Primeira linha (def load_training_data)
            method_lines.append(line)
            # Determinar n√≠vel de indenta√ß√£o
            indent_level = len(line) - len(line.lstrip())
            continue
            
        # Se linha n√£o est√° vazia e n√£o tem indenta√ß√£o maior que o m√©todo, terminou
        if line.strip() and len(line) - len(line.lstrip()) <= indent_level and line.strip().startswith('def '):
            break
            
        method_lines.append(line)
        
        # Se chegou no return final, incluir e parar
        if 'return textos, labels' in line:
            break
    
    old_method_full = '\n'.join(method_lines)
    end_pos = start_pos + len(old_method_full)
    
    # Substituir m√©todo
    new_content = content[:start_pos] + new_method + content[end_pos:]
    
    # Fazer backup
    backup_file = training_file.with_suffix('.py.backup')
    with open(backup_file, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"üìã Backup criado: {backup_file}")
    
    # Escrever arquivo corrigido
    with open(training_file, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print("‚úÖ Corre√ß√£o aplicada com sucesso!")
    print("üí° O arquivo agora funciona sem classificacao_manual")
    print("üîÆ No futuro, quando implementarmos feedback do usu√°rio,")
    print("   a coluna classificacao_manual ser√° adicionada e utilizada")
    
    return True

if __name__ == "__main__":
    print("üîß CORRE√á√ÉO DO SISTEMA DE TREINAMENTO SEM√ÇNTICO")
    print("="*50)
    print("Adaptando para trabalhar sem classificacao_manual")
    print("(Preparando para implementa√ß√£o futura de feedback)")
    print("="*50)
    
    if patch_training_file():
        print("\nüéâ Corre√ß√£o aplicada! Agora voc√™ pode executar:")
        print("   python ml_models/training/train_semantic_agents.py")
    else:
        print("\n‚ùå Falha na corre√ß√£o. Verifique o arquivo manualmente.")
