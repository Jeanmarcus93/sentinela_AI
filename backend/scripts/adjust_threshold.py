#!/usr/bin/env python3
"""
Ajuste de Threshold para Crimes Expl√≠citos
==========================================

Este script ajusta o threshold do modelo para capturar corretamente
crimes expl√≠citos como tr√°fico de drogas.
"""

import os
import sys
import json
import joblib
import pandas as pd
import numpy as np
from pathlib import Path
from typing import List, Tuple, Dict, Any
from sklearn.metrics import classification_report, accuracy_score
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√µes
BASE_DIR = Path(__file__).parent.parent
MODELS_DIR = BASE_DIR / "ml_models" / "trained"

def load_model():
    """Carrega o modelo treinado"""
    model_path = MODELS_DIR / "semantic_agents_clf.joblib"
    metadata_path = MODELS_DIR / "semantic_agents_metadata.json"
    
    model = None
    threshold = 0.35
    
    try:
        model = joblib.load(model_path)
        print(f"‚úÖ Modelo carregado de: {model_path}")
        
        # Carregar threshold se dispon√≠vel
        if metadata_path.exists():
            with open(metadata_path, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
                if 'optimal_threshold' in metadata:
                    threshold = metadata['optimal_threshold']
                    print(f"üéØ Threshold atual: {threshold:.3f}")
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar modelo: {e}")
        return None, 0.35
    
    return model, threshold

def classify_relato(model, relato: str, threshold: float):
    """Classifica um relato usando o modelo"""
    if not model:
        return "ERRO", 0.0, 0.0
    
    try:
        # Obter probabilidades
        proba = model.predict_proba([relato])[0]
        
        # Assumir que a classe SUSPEITO √© o √≠ndice 1
        suspeito_prob = proba[1] if len(proba) > 1 else proba[0]
        
        # Classificar baseado no threshold
        if suspeito_prob >= threshold:
            classification = "SUSPEITO"
            confidence = suspeito_prob
        else:
            classification = "SEM_ALTERACAO"
            confidence = 1.0 - suspeito_prob
        
        return classification, confidence, suspeito_prob
        
    except Exception as e:
        print(f"‚ùå Erro na classifica√ß√£o: {e}")
        return "ERRO", 0.0, 0.0

def test_critical_cases(model, thresholds_to_test):
    """Testa casos cr√≠ticos com diferentes thresholds"""
    print(f"\nüß™ TESTANDO CASOS CR√çTICOS COM DIFERENTES THRESHOLDS")
    print("=" * 60)
    
    # Casos cr√≠ticos que devem ser SUSPEITO
    critical_cases = [
        {
            'texto': "Den√∫ncia an√¥nima informou sobre tr√°fico de drogas. Durante a abordagem, foi localizada grande quantidade de coca√≠na escondida no ve√≠culo.",
            'expected': 'SUSPEITO',
            'description': 'Crime expl√≠cito - tr√°fico de drogas'
        },
        {
            'texto': "Ocupantes demonstraram nervosismo ao avistar a viatura. Durante a entrevista, os ocupantes entraram em contradi√ß√£o e foi localizada uma caixa de muni√ß√£o.",
            'expected': 'SUSPEITO', 
            'description': 'Nervosismo + contradi√ß√£o + muni√ß√£o'
        },
        {
            'texto': "Motorista tentou evadir-se da fiscaliza√ß√£o. Durante a entrevista, o motorista mentiu sobre o destino da viagem e havia um forte odor de maconha no interior do ve√≠culo.",
            'expected': 'SUSPEITO',
            'description': 'Tentativa de fuga + mentira + drogas'
        }
    ]
    
    # Casos que devem ser SEM_ALTERACAO
    normal_cases = [
        {
            'texto': "Abordagem a ve√≠culo com matr√≠cula de RN. O condutor, nervoso no in√≠cio, explicou que era a sua primeira vez a conduzir na autoestrada. Documentos e tudo em ordem.",
            'expected': 'SEM_ALTERACAO',
            'description': 'Nervoso mas com justificativa plaus√≠vel'
        },
        {
            'texto': "Motorista a conduzir de forma err√°tica. Ap√≥s a paragem, verificou-se que era um pai a tentar acalmar um beb√™ que chorava no banco de tr√°s. Orientado a parar em local seguro.",
            'expected': 'SEM_ALTERACAO',
            'description': 'Comportamento err√°tico com explica√ß√£o plaus√≠vel'
        },
        {
            'texto': "Fiscaliza√ß√£o de rotina. Tratava-se de uma fam√≠lia voltando de f√©rias. Nenhuma irregularidade foi encontrada.",
            'expected': 'SEM_ALTERACAO',
            'description': 'Situa√ß√£o completamente normal'
        }
    ]
    
    all_cases = critical_cases + normal_cases
    
    for threshold in thresholds_to_test:
        print(f"\nüéØ THRESHOLD: {threshold:.3f}")
        print("-" * 40)
        
        correct_critical = 0
        correct_normal = 0
        
        for i, caso in enumerate(all_cases, 1):
            classification, confidence, suspeito_prob = classify_relato(model, caso['texto'], threshold)
            
            is_correct = classification == caso['expected']
            status = "‚úÖ" if is_correct else "‚ùå"
            
            print(f"{status} CASO {i}: {caso['description']}")
            print(f"   Esperado: {caso['expected']} | Obtido: {classification} ({suspeito_prob:.3f})")
            
            if i <= len(critical_cases):
                if is_correct:
                    correct_critical += 1
            else:
                if is_correct:
                    correct_normal += 1
        
        # Estat√≠sticas
        total_critical = len(critical_cases)
        total_normal = len(normal_cases)
        
        print(f"\nüìä RESULTADOS:")
        print(f"   Crimes expl√≠citos corretos: {correct_critical}/{total_critical} ({correct_critical/total_critical*100:.1f}%)")
        print(f"   Casos normais corretos: {correct_normal}/{total_normal} ({correct_normal/total_normal*100:.1f}%)")
        print(f"   Total correto: {correct_critical + correct_normal}/{len(all_cases)} ({(correct_critical + correct_normal)/len(all_cases)*100:.1f}%)")

def find_best_threshold(model, thresholds_to_test):
    """Encontra o melhor threshold baseado nos casos cr√≠ticos"""
    print(f"\nüîç ENCONTRANDO MELHOR THRESHOLD")
    print("=" * 40)
    
    # Casos cr√≠ticos que DEVEM ser SUSPEITO
    critical_cases = [
        "Den√∫ncia an√¥nima informou sobre tr√°fico de drogas. Durante a abordagem, foi localizada grande quantidade de coca√≠na escondida no ve√≠culo.",
        "Ocupantes demonstraram nervosismo ao avistar a viatura. Durante a entrevista, os ocupantes entraram em contradi√ß√£o e foi localizada uma caixa de muni√ß√£o.",
        "Motorista tentou evadir-se da fiscaliza√ß√£o. Durante a entrevista, o motorista mentiu sobre o destino da viagem e havia um forte odor de maconha no interior do ve√≠culo.",
        "Abordagem a ve√≠culo suspeito. Durante a entrevista, foi localizada arma de fogo escondida e grande quantidade de dinheiro sem justificativa.",
        "Den√∫ncia de tr√°fico. Durante a abordagem, foi encontrada subst√¢ncia entorpecente e o condutor apresentou comportamento agressivo."
    ]
    
    # Casos normais que DEVEM ser SEM_ALTERACAO
    normal_cases = [
        "Abordagem a ve√≠culo com matr√≠cula de RN. O condutor, nervoso no in√≠cio, explicou que era a sua primeira vez a conduzir na autoestrada. Documentos e tudo em ordem.",
        "Motorista a conduzir de forma err√°tica. Ap√≥s a paragem, verificou-se que era um pai a tentar acalmar um beb√™ que chorava no banco de tr√°s. Orientado a parar em local seguro.",
        "Fiscaliza√ß√£o de rotina. Tratava-se de uma fam√≠lia voltando de f√©rias. Nenhuma irregularidade foi encontrada.",
        "Ve√≠culo parado para verifica√ß√£o de documentos. O motorista estava indo visitar parentes. Ap√≥s a verifica√ß√£o, foi liberado.",
        "Den√∫ncia de atitude suspeita. Na abordagem, constatou-se que o motorista era um detetive privado em vigil√¢ncia, devidamente identificado e com autoriza√ß√£o."
    ]
    
    best_threshold = 0.5
    best_score = 0
    
    for threshold in thresholds_to_test:
        # Testar casos cr√≠ticos (devem ser SUSPEITO)
        critical_correct = 0
        for caso in critical_cases:
            classification, _, suspeito_prob = classify_relato(model, caso, threshold)
            if classification == 'SUSPEITO':
                critical_correct += 1
        
        # Testar casos normais (devem ser SEM_ALTERACAO)
        normal_correct = 0
        for caso in normal_cases:
            classification, _, suspeito_prob = classify_relato(model, caso, threshold)
            if classification == 'SEM_ALTERACAO':
                normal_correct += 1
        
        # Calcular score (peso maior para casos cr√≠ticos)
        critical_score = critical_correct / len(critical_cases)
        normal_score = normal_correct / len(normal_cases)
        
        # Score ponderado (70% casos cr√≠ticos, 30% casos normais)
        total_score = 0.7 * critical_score + 0.3 * normal_score
        
        print(f"Threshold {threshold:.3f}: Cr√≠ticos {critical_correct}/{len(critical_cases)} ({critical_score:.2f}) | Normais {normal_correct}/{len(normal_cases)} ({normal_score:.2f}) | Total: {total_score:.3f}")
        
        if total_score > best_score:
            best_score = total_score
            best_threshold = threshold
    
    print(f"\nüèÜ MELHOR THRESHOLD: {best_threshold:.3f} (Score: {best_score:.3f})")
    return best_threshold

def save_adjusted_threshold(new_threshold):
    """Salva o threshold ajustado"""
    metadata_path = MODELS_DIR / "semantic_agents_metadata.json"
    
    try:
        with open(metadata_path, 'r', encoding='utf-8') as f:
            metadata = json.load(f)
        
        # Atualizar threshold
        metadata['optimal_threshold'] = new_threshold
        metadata['threshold_adjustment_date'] = pd.Timestamp.now().isoformat()
        metadata['threshold_reason'] = 'Ajustado para capturar crimes expl√≠citos corretamente'
        
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Threshold ajustado salvo: {new_threshold:.3f}")
        
    except Exception as e:
        print(f"‚ùå Erro ao salvar threshold: {e}")

def main():
    """Fun√ß√£o principal"""
    print("ü§ñ AJUSTE DE THRESHOLD PARA CRIMES EXPL√çCITOS")
    print("=" * 60)
    
    # Carregar modelo
    model, current_threshold = load_model()
    if not model:
        print("‚ùå N√£o foi poss√≠vel carregar o modelo")
        return
    
    # Thresholds para testar
    thresholds_to_test = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
    
    # Testar casos cr√≠ticos
    test_critical_cases(model, thresholds_to_test)
    
    # Encontrar melhor threshold
    best_threshold = find_best_threshold(model, thresholds_to_test)
    
    # Salvar threshold ajustado
    save_adjusted_threshold(best_threshold)
    
    print(f"\n‚úÖ AJUSTE CONCLU√çDO!")
    print(f"üéØ Threshold anterior: {current_threshold:.3f}")
    print(f"üéØ Threshold ajustado: {best_threshold:.3f}")
    print(f"üí° O modelo agora deve capturar crimes expl√≠citos corretamente!")

if __name__ == "__main__":
    main()

